name: front-a-deux-pas CI

# Triggers the workflow on push or pull request
on:
  push:
    branches:
      - "dev"
      - "main"
      - "test-release"
  pull_request:
    branches:
      - "**"

# Workflow run made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ vars.APP_NAME }}

    # export APP_VERSION to other jobs
    outputs:
      APP_VERSION: ${{ steps.set_app_version.outputs.APP_VERSION }}
      ARTIFACT_VERSION: ${{ steps.set_artifact_version.outputs.ARTIFACT_VERSION }}
    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@master
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      # Install the dependencies using npm ci
      - name: Install dependencies
        run: npm ci

      # Build
      - name: Build
        run: npm run build:ci

      # Run Cypress tests
      - name: Run E2E tests
        uses: cypress-io/github-action@v6
        with:
          install: false
          build: npm run build
          start: npm start -- --host 0.0.0.0
          wait-on: "http://localhost:4200"

      - name: Run Component Testing
        uses: cypress-io/github-action@v6
        with:
          install: false
          component: true

      # Get application version from pom.xml to variable
      - name: Retrieve Application Version
        id: set_app_version
        run: |
          APP_VERSION=$(node -p "require('./package.json').version")
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_OUTPUT
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV

      - name: Print Package.json project version
        run: echo "application version = ${{ env.APP_VERSION }}"

      - name: Set Artifact Version
        id: set_artifact_version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/test-release" ]]; then
            ARTIFACT_VERSION="${APP_VERSION}"
          else
            BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/[^a-zA-Z0-9]/-/g')
            ARTIFACT_VERSION="${APP_VERSION}-${BRANCH_NAME}"
          fi
          echo "ARTIFACT_VERSION=${ARTIFACT_VERSION}" >> $GITHUB_OUTPUT
          echo "ARTIFACT_VERSION=${ARTIFACT_VERSION}" >> $GITHUB_ENV

      - name: Upload Application Package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-${{ env.ARTIFACT_VERSION }}
          path: dist
          overwrite: true
          
  docker:
    needs: build
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ vars.APP_NAME }}
      APP_VERSION: ${{ needs.build.outputs.APP_VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      # Prepare docker build with buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
        with:
          driver: docker

      # Docker login
      - name: Login to Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker build and push
      - name: Build and push
        uses: docker/build-push-action@master
        with:
          context: ${{ github.workspace }}
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }} # Don't push on PR
          tags: docker.io/douniabed/${{ env.APP_NAME }}:${{ env.APP_VERSION }}
          build-args: |
            APP_NAME=${{ env.APP_NAME }}
            APP_VERSION=${{ env.APP_VERSION }}

  release:
    needs: [build, docker]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test-release'
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ vars.APP_NAME }}
      APP_VERSION: ${{ needs.build.outputs.APP_VERSION }}
      ARTIFACT_VERSION: ${{ needs.build.outputs.ARTIFACT_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-${{ env.ARTIFACT_VERSION }}
          path: ./artifact

      - name: Create archive of artifact
        run: |
          cd ./artifact
          zip -r ../front-a-deux-pas-${{ env.ARTIFACT_VERSION }}.zip .
          cd ..
      
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Obtenir le court commit SHA
          COMMIT_SHA=$(git rev-parse --short HEAD)
          RELEASE_VERSION="${{ env.APP_VERSION }}-${COMMIT_SHA}"
          DOCKER_IMAGE_URL="docker.io/douniabed/${{ env.APP_NAME }}:${{ env.ARTIFACT_VERSION }}"
          RELEASE_NOTES="front-a-deux-pas release v${RELEASE_VERSION}
      
          Docker image: \`${DOCKER_IMAGE_URL}\`
          Commit: ${COMMIT_SHA}"
          
          gh release create v${RELEASE_VERSION} front-a-deux-pas-${{ env.ARTIFACT_VERSION }}.zip \
            --title "v${RELEASE_VERSION}" \
            --notes "${RELEASE_NOTES}" \
            --target ${{ github.ref_name }}
            
      - name: Increment version and create PR
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          # Générer un nom de branche unique
          BRANCH_NAME="bump-version-$(date +%Y%m%d%H%M%S)"
          git checkout -b $BRANCH_NAME
          
          # Retirer le suffixe -SNAPSHOT et incrémenter la version
          CURRENT_VERSION=$(node -p "require('./package.json').version.replace(/-SNAPSHOT$/, '')")
          npm --no-git-tag-version version $CURRENT_VERSION
          npm --no-git-tag-version version patch
          NEW_VERSION=$(node -p "require('./package.json').version")
          
          # Ajouter le suffixe -SNAPSHOT à la nouvelle version
          sed -i 's/"version": "'"$NEW_VERSION"'"/"version": "'"$NEW_VERSION-SNAPSHOT"'"/' package.json
          NEW_VERSION="${NEW_VERSION}-SNAPSHOT"
          
          # Commit les changements
          git add package.json
          git commit -m "Increment version to ${NEW_VERSION} [skip ci]"
          git push origin $BRANCH_NAME
          
          gh pr create --base develop --head $BRANCH_NAME \
            --title "Bump version to ${NEW_VERSION}" \
            --body "Automated version bump after release ${{ env.APP_VERSION }}"

          echo "Pull request created successfully. Please review and merge manually."
          