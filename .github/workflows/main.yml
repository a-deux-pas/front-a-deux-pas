name: front-a-deux-pas CI
# Triggers the workflow on push or pull request
on:
  push:
    branches:
      - "dev"
      - "main"
  pull_request:
    branches:
      - "**"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ vars.APP_NAME }}
    # export APP_VERSION to other jobs
    outputs:
      APP_VERSION: ${{ steps.set_app_version.outputs.APP_VERSION }}
    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm ci
      - run: npm run build --if-present
      - run: ng test --watch=false --browsers=ChromeHeadles
        # Get application version from pom.xml to variable
      - name: Retrieve Application Version
        id: set_app_version
        run: |
          echo "APP_VERSION=$(node -p "require('./package.json').version -q -DforceStdout)" >> $GITHUB_ENV
          echo "APP_VERSION=$(node -p "require('./package.json').version -q -DforceStdout)" >> $GITHUB_OUTPUT
      - name: Print Package.json project version
        run: echo "application version = ${{ env.APP_VERSION }}"
      # Upload artifact to repository
      - name: Upload Application Package
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}.zip
          path: ${{ github.workspace }}
          overwrite: true
  #docker:
  #  needs: maven
  #  runs-on: ubuntu-latest
  #  env:
  #    APP_NAME: ${{ vars.APP_NAME }}
  #    APP_VERSION: ${{ needs.maven.outputs.APP_VERSION }}
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@master
  #    - name: Download Application Package
  #      uses: actions/download-artifact@master
  #      with:
  #        name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}.jar
  #        path: target/
  #    # Prepare docker build with buildx
  #    - name: Set up Docker Buildx
  #      uses: docker/setup-buildx-action@master
  #      with:
  #        driver: docker
  #    # Docker login
  #    - name: Login to Docker Hub
  #      uses: docker/login-action@master
  #      with:
  #        username: ${{ secrets.DOCKERHUB_USERNAME }}
  #        password: ${{ secrets.DOCKERHUB_TOKEN }}
  #    # Docker build and push
  #    - name: Build and push
  #      uses: docker/build-push-action@master
  #      with:
  #        context: ${{ github.workspace }}
  #        file: Dockerfile
  #        push: ${{ github.event_name != 'pull_request' }} # Don't push on PR
  #        tags: docker.io/douniabed/${{ env.APP_NAME }}:${{ env.APP_VERSION }}
  #        build-args: |
  #          APP_NAME=${{ env.APP_NAME }}
  #          APP_VERSION=${{ env.APP_VERSION }}
#
