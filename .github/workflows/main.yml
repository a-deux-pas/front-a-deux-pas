name: front-a-deux-pas CI

# Triggers the workflow on push or pull request
on:
  push:
    branches:
      - "dev"
      - "main"
  pull_request:
    branches:
      - "**"

# Workflow run made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ vars.APP_NAME }}

    # export APP_VERSION to other jobs
    outputs:
      APP_VERSION: ${{ steps.set_app_version.outputs.APP_VERSION }}
    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@master
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      # Install the dependencies using npm ci
      - name: Install dependencies
        run: npm ci

      # Create environment.secret.ts file with Mapbox token
      - name: Create environment.secrets.ts file
        run: |
          mkdir -p ./src/environments/
          echo "export const environment = {" > ./src/environments/environment.secrets.ts
          echo "  mapbox: {" >> ./src/environments/environment.secrets.ts
          echo "    accessToken: '$MAPBOX_ACCESS_TOKEN'," >> ./src/environments/environment.secrets.ts
          echo "  }" >> ./src/environments/environment.secrets.ts
          echo "};" >> ./src/environments/environment.secrets.ts
        env:
          MAPBOX_ACCESS_TOKEN: ${{ secrets.MAPBOX_ACCESS_TOKEN }}

      # Build
      - name: Build
        run: npm run build:ci

      # Run Cypress tests
      - name: Run E2E tests
        uses: cypress-io/github-action@v6
        with:
          install: false
          build: npm run build
          start: npm start

      - name: Run Component Testing
        uses: cypress-io/github-action@v6
        with:
          install: false
          component: true

      # Get application version from pom.xml to variable
      - name: Retrieve Application Version
        id: set_app_version
        run: |
          echo APP_VERSION=$(node -p "require('./package.json').version") | tee -a $GITHUB_OUTPUT >> $GITHUB_ENV

      - name: Print Package.json project version
        run: echo "application version = ${{ env.APP_VERSION }}"

      # Upload artifact to repository
      - name: Upload Application Package
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}
          path: |
            ${{ github.workspace }}
            !.git/
          overwrite: true
