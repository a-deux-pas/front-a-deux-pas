name: front-a-deux-pas CI
# Triggers the workflow on push or pull request
on:
  push:
    branches:
      - "dev"
      - "main"
  pull_request:
    branches:
      - "**"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ vars.APP_NAME }}
    # export APP_VERSION to other jobs
    outputs:
      APP_VERSION: ${{ steps.set_app_version.outputs.APP_VERSION }}
    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@master
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      # Installs the dependencies using npm ci
      - run: npm ci
      - run: npm run build:ci
      # Run all Cypress tests
      - name: Run E2E tests
        uses: cypress-io/github-action@v6
        with:
          # we have already installed everything
          install: false
          build: npm run build
          start: npm start
      - name: Run Component Testing
        uses: cypress-io/github-action@v6
        with:
          # we have already installed everything
          install: false
          component: true
        # Get application version from pom.xml to variable
      - name: Retrieve Application Version
        id: set_app_version
        run: |
          echo APP_VERSION=$(node -p "require('./package.json').version") | tee -a $GITHUB_OUTPUT >> $GITHUB_ENV
      - name: Print Package.json project version
        run: echo "application version = ${{ env.APP_VERSION }}"
      # Upload artifact to repository
      - name: Upload Application Package
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}
          path: |
            ${{ github.workspace }}
            !.git/
          overwrite: true
  docker:
    needs: build
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ vars.APP_NAME }}
      APP_VERSION: ${{ needs.build.outputs.APP_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
      # - name: Download Application Package
      #   uses: actions/download-artifact@master
      #   with:
      #     name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}
      #     path: ${{ github.workspace }}
      # Prepare docker build with buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
        with:
          driver: docker
      # Docker login
      - name: Login to Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Docker build and push
      - name: Build and push
        uses: docker/build-push-action@master
        with:
          context: ${{ github.workspace }}
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }} # Don't push on PR
          tags: docker.io/douniabed/${{ env.APP_NAME }}:${{ env.APP_VERSION }}
          build-args: |
            APP_NAME=${{ env.APP_NAME }}
            APP_VERSION=${{ env.APP_VERSION }}
